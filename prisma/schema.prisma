generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}
model User {
  id                    String                  @id @default(cuid())
  name                  String                @unique
  email                 String                 @unique
  password              String?
  image                 String?
  role                  UserRole                @default(USER)
  emailVerified         DateTime?

  accounts              Account[]  
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}
model VerificationOTP {
  id      String   @id @default(cuid())
  email   String
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}
model ResetPasswordOTP {
  id      String   @id @default(cuid())
  email   String
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

model Artist {
  id             String    @id @default(cuid())
  name           String    @unique @db.VarChar
  image          String?   @unique @db.VarChar
  created_at     DateTime  @default(now())

  albums         Album[] 
  tracks         Track[]
}
model Album {
  id            String    @id @default(cuid())
  name          String    @db.VarChar
  image         String?   @db.VarChar
  artist_id     String    @map("artist_id")

  artist        Artist   @relation(fields: [artist_id], references: [id], onDelete: Cascade)
  tracks        Track[]
}
model Track {
  id          String    @id @default(cuid())
  name        String    @db.VarChar
  image       String?
  audio_url   String    @db.VarChar
  album_id    String    @map("album_id")
  artist_id   String    @map("artist_id")
  created_at  DateTime  @default(now())

  album       Album?    @relation(fields: [album_id], references: [id], onDelete: Cascade)
  artist      Artist?   @relation(fields: [artist_id], references: [id], onDelete: Cascade)
}